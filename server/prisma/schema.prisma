// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Dog {
  id           Int          @id @default(autoincrement())
  name         String
  nickname     String?
  birthdayDate DateTime?
  gender       String?
  colour       String?
  breed        String
  avatarUrl    String?
  daysDog      Attendance[]
  daysBooking  Booking[]
  vaccines     Vaccine[]
  Owner        Owner        @relation(fields: [ownerId], references: [id])
  ownerId      Int

  @@map("dogs")
}

model Owner {
  id           Int       @id @default(autoincrement())
  name         String
  secondOwner  String?
  phoneOne     String
  phoneTwo     String?
  emailAddress String?   @unique
  address      String?
  notes        String?
  type         String?
  dogs         Dog[]
  extracts     Extract[]

  @@map("owners")
}

model Vaccine {
  id          Int      @id @default(autoincrement())
  dateVaccine DateTime
  type        String
  dogId       Int
  dog         Dog      @relation(fields: [dogId], references: [id], onDelete: Cascade)

  @@map("vaccines")
}

model Day {
  id      Int          @id @default(autoincrement())
  date    DateTime
  dayDogs Attendance[]

  @@unique([date])
  @@map("days")
}

model Attendance {
  id         Int     @id @default(autoincrement())
  typeDay    String
  paid       Boolean
  day_id     Int
  dog_id     Int
  extract_id Int?

  day     Day      @relation(fields: [day_id], references: [id])
  dog     Dog      @relation(fields: [dog_id], references: [id])
  extract Extract?

  @@map("attendances")
}

model Extract {
  id          Int       @id @default(autoincrement())
  value       Decimal
  paidValue   Decimal?
  totalValue  Decimal
  description String?
  done        Boolean
  date        DateTime?
  type        String?

  attendanceId Int?        @unique
  bookingId    Int?        @unique
  ownerId      Int
  booking      Booking?    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  attendance   Attendance? @relation(fields: [attendanceId], references: [id], onDelete: Cascade)
  Owner        Owner       @relation(fields: [ownerId], references: [id])

  @@map("extracts")
}

model DayBooking {
  id          Int       @id @default(autoincrement())
  date        DateTime
  notes       String?
  daysBooking Booking[]

  @@unique([date])
  @@map("daysBooking")
}

model Booking {
  id             Int      @id @default(autoincrement())
  time           DateTime
  status         String
  day_booking_id Int
  dog_id         Int?

  dayBooking DayBooking @relation(fields: [day_booking_id], references: [id])
  dog        Dog?       @relation(fields: [dog_id], references: [id])
  extract    Extract?
  offering   Offering?

  @@map("bookings")
}

model Offering {
  id      Int     @id @default(autoincrement())
  owner   String?
  phone   String?
  ownerId Int?
  type    String?
  notes   String?

  bookingId Int     @unique
  booking   Booking @relation(fields: [bookingId], references: [id])

  @@map("offering")
}

model User {
  id       Int     @id @default(autoincrement())
  admin    Boolean
  email    String  @unique
  name     String?
  password String
  salt     String

  @@map("users")
}

model Preferences {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String

  @@map("preferences")
}

model Till {
  id           Int      @id @default(autoincrement())
  date         DateTime
  valueStarted Decimal
  value        Decimal
  valueCard    Decimal
  valueOther   Decimal
  description  String
  type         String

  @@map("till")
}
